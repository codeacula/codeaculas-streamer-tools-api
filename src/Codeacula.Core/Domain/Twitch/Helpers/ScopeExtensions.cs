namespace Codeacula.Core.Domain.Twitch.Helpers;

using Codeacula.Core.Domain.Twitch.Enums;

public static class ScopeExtensions
{
  public static string ToScopeString(this Scope scope) => scope switch
  {
    Scope.AnalyticsReadExtensions => "analytics:read:extensions",
    Scope.AnalyticsReadGames => "analytics:read:games",
    Scope.BitsRead => "bits:read",
    Scope.ChannelBot => "channel:bot",
    Scope.ChannelEditCommercial => "channel:edit:commercial",
    Scope.ChannelManageAds => "channel:manage:ads",
    Scope.ChannelManageBroadcast => "channel:manage:broadcast",
    Scope.ChannelManageExtensions => "channel:manage:extensions",
    Scope.ChannelManageGuestStar => "channel:manage:guest_star",
    Scope.ChannelManageModerators => "channel:manage:moderators",
    Scope.ChannelManagePolls => "channel:manage:polls",
    Scope.ChannelManagePredictions => "channel:manage:predictions",
    Scope.ChannelManageRaids => "channel:manage:raids",
    Scope.ChannelManageRedemptions => "channel:manage:redemptions",
    Scope.ChannelManageSchedule => "channel:manage:schedule",
    Scope.ChannelManageVideos => "channel:manage:videos",
    Scope.ChannelManageVips => "channel:manage:vips",
    Scope.ChannelReadAds => "channel:read:ads",
    Scope.ChannelReadCharity => "channel:read:charity",
    Scope.ChannelReadEditors => "channel:read:editors",
    Scope.ChannelReadGoals => "channel:read:goals",
    Scope.ChannelReadGuestStar => "channel:read:guest_star",
    Scope.ChannelReadHypeTrain => "channel:read:hype_train",
    Scope.ChannelReadPolls => "channel:read:polls",
    Scope.ChannelReadPredictions => "channel:read:predictions",
    Scope.ChannelReadRedemptions => "channel:read:redemptions",
    Scope.ChannelReadStreamKey => "channel:read:stream_key",
    Scope.ChannelReadSubscriptions => "channel:read:subscriptions",
    Scope.ChannelReadVips => "channel:read:vips",
    Scope.ClipsEdit => "clips:edit",
    Scope.ModerationRead => "moderation:read",
    Scope.ModeratorManageAnnouncements => "moderator:manage:announcements",
    Scope.ModeratorManageAutomod => "moderator:manage:automod",
    Scope.ModeratorManageAutomodSettings => "moderator:manage:automod_settings",
    Scope.ModeratorManageBannedUsers => "moderator:manage:banned_users",
    Scope.ModeratorManageBlockedTerms => "moderator:manage:blocked_terms",
    Scope.ModeratorManageChatMessages => "moderator:manage:chat_messages",
    Scope.ModeratorManageChatSettings => "moderator:manage:chat_settings",
    Scope.ModeratorManageGuestStar => "moderator:manage:guest_star",
    Scope.ModeratorManageShoutouts => "moderator:manage:shoutouts",
    Scope.ModeratorManageShieldMode => "moderator:manage:shield_mode",
    Scope.ModeratorManageUnbanRequests => "moderator:manage:unban_requests",
    Scope.ModeratorManageWarnings => "moderator:manage:warnings",
    Scope.ModeratorReadAutomodSettings => "moderator:read:automod_settings",
    Scope.ModeratorReadBannedUsers => "moderator:read:banned_users",
    Scope.ModeratorReadBlockedTerms => "moderator:read:blocked_terms",
    Scope.ModeratorReadChatMessages => "moderator:read:chat_messages",
    Scope.ModeratorReadChatSettings => "moderator:read:chat_settings",
    Scope.ModeratorReadChatters => "moderator:read:chatters",
    Scope.ModeratorReadFollowers => "moderator:read:followers",
    Scope.ModeratorReadGuestStar => "moderator:read:guest_star",
    Scope.ModeratorReadModerators => "moderator:read:moderators",
    Scope.ModeratorReadShoutouts => "moderator:read:shoutouts",
    Scope.ModeratorReadShieldMode => "moderator:read:shield_mode",
    Scope.ModeratorReadSuspiciousUsers => "moderator:read:suspicious_users",
    Scope.ModeratorReadUnbanRequests => "moderator:read:unban_requests",
    Scope.ModeratorReadVips => "moderator:read:vips",
    Scope.ModeratorReadWarnings => "moderator:read:warnings",
    Scope.UserBot => "user:bot",
    Scope.UserEdit => "user:edit",
    Scope.UserEditBroadcast => "user:edit:broadcast",
    Scope.UserManageBlockedUsers => "user:manage:blocked_users",
    Scope.UserManageChatColor => "user:manage:chat_color",
    Scope.UserManageWhispers => "user:manage:whispers",
    Scope.UserReadBlockedUsers => "user:read:blocked_users",
    Scope.UserReadBroadcast => "user:read:broadcast",
    Scope.UserReadChat => "user:read:chat",
    Scope.UserReadEmail => "user:read:email",
    Scope.UserReadEmotes => "user:read:emotes",
    Scope.UserReadFollows => "user:read:follows",
    Scope.UserReadModeratedChannels => "user:read:moderated_channels",
    Scope.UserReadSubscriptions => "user:read:subscriptions",
    Scope.UserReadWhispers => "user:read:whispers",
    Scope.UserWriteChat => "user:write:chat",
    _ => throw new ArgumentOutOfRangeException(nameof(scope), scope, message: null),
  };

  public static IReadOnlyList<string> GetAllScopeStrings() =>
    [.. Enum.GetValues<Scope>().Select(scope => scope.ToScopeString())];

  public static string GetRequiredScopes()
  {
    var scopes = new List<Scope>
    {
      Scope.BitsRead,
      Scope.ChannelBot,
      Scope.ChannelManageAds,
      Scope.ChannelReadAds,
      Scope.ChannelManageBroadcast,
      Scope.ChannelReadEditors,
      Scope.ChannelReadGoals,
      Scope.ChannelReadHypeTrain,
      Scope.ChannelManageModerators,
      Scope.ChannelReadPolls,
      Scope.ChannelManagePolls,
      Scope.ChannelReadPredictions,
      Scope.ChannelManagePredictions,
      Scope.ChannelManageRaids,
      Scope.ChannelReadRedemptions,
      Scope.ChannelManageRedemptions,
      Scope.ChannelManageSchedule,
      Scope.ChannelReadStreamKey,
      Scope.ChannelReadSubscriptions,
      Scope.ChannelManageVideos,
      Scope.ChannelReadVips,
      Scope.ChannelManageVips,
      Scope.ModerationRead,
      Scope.ModeratorManageAnnouncements,
      Scope.ModeratorManageAutomod,
      Scope.ModeratorReadAutomodSettings,
      Scope.ModeratorManageAutomodSettings,
      Scope.ModeratorReadBannedUsers,
      Scope.ModeratorManageBannedUsers,
      Scope.ModeratorReadBlockedTerms,
      Scope.ModeratorManageBlockedTerms,
      Scope.ModeratorReadChatMessages,
      Scope.ModeratorManageChatMessages,
      Scope.ModeratorReadChatSettings,
      Scope.ModeratorManageChatSettings,
      Scope.ModeratorReadChatters,
      Scope.ModeratorReadFollowers,
      Scope.ModeratorReadModerators,
      Scope.ModeratorReadShieldMode,
      Scope.ModeratorManageShieldMode,
      Scope.ModeratorReadShoutouts,
      Scope.ModeratorManageShoutouts,
      Scope.ModeratorReadSuspiciousUsers,
      Scope.ModeratorReadUnbanRequests,
      Scope.ModeratorManageUnbanRequests,
      Scope.ModeratorReadVips,
      Scope.ModeratorReadWarnings,
      Scope.ModeratorManageWarnings,
    };

    return string.Join(' ', scopes.Select(scope => scope.ToScopeString()));
  }
}
